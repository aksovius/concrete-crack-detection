# -*- coding: utf-8 -*-
"""
Automatically generated by Colaboratory.

Original file is located at

"""

import numpy as np
import tensorflow as tf
import streamlit as st
from PIL import Image
from stqdm import stqdm
import base64
from io import BytesIO
import matplotlib.pyplot as plt

model = tf.keras.models.load_model("best_mobile.h5", compile=False)

st.sidebar.header('Segmentation settings')
img_location=st.empty()
uploaded_file = st.sidebar.file_uploader("Choose an image...", type="jpg")
if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption='Uploaded Image.', use_column_width=True)
    #img_location.image(image, caption='Uploaded Image.', use_column_width=True)
    image=np.array(image)

run = st.sidebar.button("Run")

SIZE=256
if run:
    startX = 0
    startY = 0
    new_image=np.zeros(image .shape)

    for i in stqdm(range(SIZE,image.shape[0],SIZE), desc="Prediction"):
      for j in range(SIZE,image.shape[1],SIZE):
        part= image[startY:i,startX:j,]
        part= part/255.
        part = model.predict(np.expand_dims(part, axis=0))[0] > 0.5
        new_image[startY:i,startX:j,]=part
     
    # line in the right   
        if j+SIZE > image.shape[1]:
          part= image[startY:i,-SIZE:,]
          part= part/255.
          part = model.predict(np.expand_dims(part, axis=0))[0] > 0.5
          new_image[startY:i,-SIZE:,]=part
        startX=j
      startX = 0
      startY = i
      
    # line in the bottom 
      if i+SIZE > image.shape[0]:  
        for j in range(SIZE,image.shape[1],SIZE):
          part= image[-SIZE:,startX:j,]
          part= part/255.
          part = model.predict(np.expand_dims(part, axis=0))[0] > 0.5
          new_image[-SIZE:,startX:j,]=part
          
    # line in the right   
          if j+SIZE > image.shape[1]:
            part= image[-SIZE:,-SIZE:,]
            part= part/255.
            part = model.predict(np.expand_dims(part, axis=0))[0] > 0.5
            new_image[-SIZE:,-SIZE:,]=part
          startX=j
    #img_location.image(new_image,  caption='Predicted image.', use_column_width=True)
    new_image[np.where((new_image>[128,128,128]).all(axis=2))] = [255,0,0]
    # fig=plt.figure()
    # title = fig.suptitle('Predicted', fontsize="x-large")
    # ax = fig.add_subplot()
    # ax.imshow(image)
    # ax.imshow(new_image, alpha=0.4)
    # img_location.write(fig)
    st.image(new_image)
    # result = Image.fromarray(new_image[:,:,0])
    
    
    
    # def get_image_download_link(img):
    # 	"""Generates a link allowing the PIL image to be downloaded
    # 	in:  PIL image
    # 	out: href string
    # 	"""
    # 	buffered = BytesIO()
    # 	img.save(buffered, format="JPEG")
    # 	img_str = base64.b64encode(buffered.getvalue()).decode()
    # 	href = f'<a href="data:file/jpg;base64,{img_str}">Download result</a>'
    # 	return href
    
    # st.markdown(get_image_download_link(result), unsafe_allow_html=True)


